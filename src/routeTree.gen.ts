/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DocsImport } from './routes/_docs'
import { Route as privateRouteImport } from './routes/(private)/route'
import { Route as IndexImport } from './routes/index'
import { Route as PocDocsImport } from './routes/poc/docs'
import { Route as privateDocsIndexImport } from './routes/(private)/docs/index'
import { Route as privateDocsStackIndexImport } from './routes/(private)/docs/stack/index'

// Create/Update Routes

const DocsRoute = DocsImport.update({
  id: '/_docs',
  getParentRoute: () => rootRoute,
} as any)

const privateRouteRoute = privateRouteImport.update({
  id: '/(private)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PocDocsRoute = PocDocsImport.update({
  id: '/poc/docs',
  path: '/poc/docs',
  getParentRoute: () => rootRoute,
} as any)

const privateDocsIndexRoute = privateDocsIndexImport.update({
  id: '/docs/',
  path: '/docs/',
  getParentRoute: () => privateRouteRoute,
} as any)

const privateDocsStackIndexRoute = privateDocsStackIndexImport.update({
  id: '/docs/stack/',
  path: '/docs/stack/',
  getParentRoute: () => privateRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(private)': {
      id: '/(private)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof privateRouteImport
      parentRoute: typeof rootRoute
    }
    '/_docs': {
      id: '/_docs'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DocsImport
      parentRoute: typeof rootRoute
    }
    '/poc/docs': {
      id: '/poc/docs'
      path: '/poc/docs'
      fullPath: '/poc/docs'
      preLoaderRoute: typeof PocDocsImport
      parentRoute: typeof rootRoute
    }
    '/(private)/docs/': {
      id: '/(private)/docs/'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof privateDocsIndexImport
      parentRoute: typeof privateRouteImport
    }
    '/(private)/docs/stack/': {
      id: '/(private)/docs/stack/'
      path: '/docs/stack'
      fullPath: '/docs/stack'
      preLoaderRoute: typeof privateDocsStackIndexImport
      parentRoute: typeof privateRouteImport
    }
  }
}

// Create and export the route tree

interface privateRouteRouteChildren {
  privateDocsIndexRoute: typeof privateDocsIndexRoute
  privateDocsStackIndexRoute: typeof privateDocsStackIndexRoute
}

const privateRouteRouteChildren: privateRouteRouteChildren = {
  privateDocsIndexRoute: privateDocsIndexRoute,
  privateDocsStackIndexRoute: privateDocsStackIndexRoute,
}

const privateRouteRouteWithChildren = privateRouteRoute._addFileChildren(
  privateRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof privateRouteRouteWithChildren
  '': typeof DocsRoute
  '/poc/docs': typeof PocDocsRoute
  '/docs': typeof privateDocsIndexRoute
  '/docs/stack': typeof privateDocsStackIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof privateRouteRouteWithChildren
  '': typeof DocsRoute
  '/poc/docs': typeof PocDocsRoute
  '/docs': typeof privateDocsIndexRoute
  '/docs/stack': typeof privateDocsStackIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(private)': typeof privateRouteRouteWithChildren
  '/_docs': typeof DocsRoute
  '/poc/docs': typeof PocDocsRoute
  '/(private)/docs/': typeof privateDocsIndexRoute
  '/(private)/docs/stack/': typeof privateDocsStackIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/poc/docs' | '/docs' | '/docs/stack'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/poc/docs' | '/docs' | '/docs/stack'
  id:
    | '__root__'
    | '/'
    | '/(private)'
    | '/_docs'
    | '/poc/docs'
    | '/(private)/docs/'
    | '/(private)/docs/stack/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  privateRouteRoute: typeof privateRouteRouteWithChildren
  DocsRoute: typeof DocsRoute
  PocDocsRoute: typeof PocDocsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  privateRouteRoute: privateRouteRouteWithChildren,
  DocsRoute: DocsRoute,
  PocDocsRoute: PocDocsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(private)",
        "/_docs",
        "/poc/docs"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(private)": {
      "filePath": "(private)/route.tsx",
      "children": [
        "/(private)/docs/",
        "/(private)/docs/stack/"
      ]
    },
    "/_docs": {
      "filePath": "_docs.tsx"
    },
    "/poc/docs": {
      "filePath": "poc/docs.tsx"
    },
    "/(private)/docs/": {
      "filePath": "(private)/docs/index.tsx",
      "parent": "/(private)"
    },
    "/(private)/docs/stack/": {
      "filePath": "(private)/docs/stack/index.tsx",
      "parent": "/(private)"
    }
  }
}
ROUTE_MANIFEST_END */
